{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/@babel/runtime/helpers/classCallCheck.js","node_modules/@babel/runtime/helpers/createClass.js","node_modules/@babel/runtime/helpers/interopRequireDefault.js","node_modules/@babel/runtime/helpers/typeof.js","src/core/Event.js","src/core/FileSlice.js","src/core/I18n.js","src/core/Option.js","src/core/Queue.js","src/core/Reche.js","src/core/Util.js","src/core/Xhr.js","src/index.js"],"names":[],"mappings":"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","file":"reche.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nmodule.exports = _interopRequireDefault;","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;","export default class Event {\r\n    constructor (){\r\n        this.event = {};\r\n        this.xhrEvent = [\r\n            'onloadstart',\r\n            'onprogress',\r\n            'onabort',\r\n            'ontimeout',\r\n            'onerror',\r\n            'onload',\r\n            'onloadend',\r\n            'onreadystatechange'\r\n        ];\r\n        this.recheEvents = [\r\n            \"fileStop\",\r\n            \"fileResume\",\r\n\r\n            \"fileCancel\",\r\n            \"fileRestart\",\r\n\r\n            \"fileRemove\",\r\n            \"fileRemoveAll\",\r\n\r\n            \"fileAppend\",\r\n            \"fileCompleteAll\",\r\n            \"fileProgress\",\r\n            \"fileStatusChange\"\r\n        ]\r\n    }\r\n    on(name,callback){\r\n        if (this.detectEventType(name) && typeof callback === 'function') {\r\n            if (!this.event[name]) {\r\n                this.event[name] = [];\r\n            }\r\n            this.event[name].push(callback);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 事件触发器\r\n     * @param name 事件名\r\n     * @param info 信息？？？ 传入回调的，具体是作甚的还需要往下看\r\n     */\r\n    trigger(name, info) {\r\n        if (this.event[name] && this.event[name].length) {\r\n            for (let i = 0; i < this.event[name].length; i++) {\r\n                this.event[name][i](info);\r\n            }\r\n        }\r\n    }\r\n    detectEventType(name) {\r\n        if (this.recheEvents.indexOf(name) !== -1) {\r\n            return 'recheEvents';\r\n        } else if (this.xhrEvent.indexOf(name) !== -1) {\r\n            return 'xhrEvent';\r\n        }\r\n        console.error(`Unknown event name: ${name}`);\r\n        return null;\r\n    }\r\n}","export default class FileSlice {\r\n    constructor(reche) {\r\n        this.reche = reche;\r\n    }\r\n    /**\r\n     * 文件分片处理逻辑\r\n     * @param file 原生file\r\n     * @param data 其他參數\r\n     * @returns {{fileName: *, file: null, fileSize: *, fileChunk: Array, percent: number, fileId: *}}\r\n     */\r\n    fileSlice(file,data) {\r\n        let fileId = this.reche.util.randomString(8);\r\n        let fileSliced = {\r\n            fileId: fileId,\r\n            fileName: file.name,\r\n            fileSize: file.size,\r\n            file: null,\r\n            data:data,\r\n            resParam:null,\r\n            status: this.reche.fileStatus.onWaiting,\r\n            percent: 0,\r\n            fileChunk: []\r\n        };\r\n        if (file.size <= this.reche.option.chunkUseSize) {\r\n            //普通\r\n            fileSliced.file = file\r\n        } else {\r\n            let index = 0; //切片索引\r\n            let start = 0; //切片开始位置\r\n            let end = 0; //切片结束位置\r\n            let chunkSize = this.reche.option.chunkSize;// 配置中读取切块大小\r\n            let totalSlices = Math.ceil(file.size / chunkSize); // 计算文件切片总数（向上取整）\r\n            while (index < totalSlices) {\r\n                //分片\r\n                let chunkObj = {\r\n                    fileChunkSize: 0,\r\n                    fileId: fileId,\r\n                    index: 0,\r\n                    chunk: null\r\n                };\r\n                start = index * chunkSize;\r\n                end = start + chunkSize;\r\n                //切割文件\r\n                let chunk = file.slice(start, end);\r\n                index++;\r\n                chunkObj.chunk = chunk;\r\n                chunkObj.index = index;\r\n                chunkObj.fileChunkSize = chunk.size;\r\n                fileSliced.fileChunk.push(chunkObj)\r\n            }\r\n        }\r\n        return fileSliced\r\n    }\r\n}","export default class I18n {\r\n    constructor(lang){\r\n        this.lang = lang;\r\n        this.txt = {\r\n            'zh-cn': {\r\n                unSupportXhr:'您的浏览器不支持XHR请求',\r\n                cannotStopByProgress:'正在创建文件不能暂停',\r\n                cannotStopByUploaded:'文件已上传完成不能暂停',\r\n                cannotStop:'当前文件状态不能暂停'\r\n            }\r\n        }\r\n    }\r\n\r\n    i18n(name){\r\n        if (this.txt[this.lang] && this.txt[this.lang][name]) {\r\n            return this.txt[this.lang][name];\r\n        } else {\r\n            return name;\r\n        }\r\n    }\r\n}","/**\r\n * 配置处理\r\n */\r\nexport default class Option {\r\n    constructor() {\r\n        this.defaultOption = {\r\n            chunkUse: true,//是否开启分片上传 默认不开启\r\n            chunkSize: 5 << 20,//分片大小 默认5M\r\n            chunkUseSize: 10 << 20,//使用分片上传时文件最小大小 默认10M\r\n            path: '',//上传接口 如果开启分片上传而没有chunkInitPath和chunkPath时 使用path\r\n            chunkPath: '',//分片上传接口\r\n            timeout: 1000 * 60 *60,//请求超时时间 默认1小时\r\n            chunkThreadNumber: 5,//分片上传时，开启的线程数，\r\n            lang:'zh-cn',//语言 默认中文\r\n            async:true,\r\n            headers:{},\r\n            fdKey:{},\r\n        }\r\n    }\r\n    optionInit(option){\r\n        for (const item in this.defaultOption) {\r\n            if (this.defaultOption.hasOwnProperty(item) && !option.hasOwnProperty(item)) {\r\n                option[item] = this.defaultOption[item];\r\n            }\r\n        }\r\n        let fdKey = {\r\n            fileKey: 'file',\r\n            chunkKey:'chunk',\r\n            chunksKey:'chunks',\r\n            indexKey:'index',\r\n            fileNameKey:'fileName',\r\n        };\r\n        if(option.fdKey){\r\n            for(const item in fdKey){\r\n                option.fdKey[item] = option.fdKey[item]?option.fdKey[item]:fdKey[item]\r\n            }\r\n        }else {\r\n            option.fdKey = fdKey\r\n        }\r\n        return option\r\n    }\r\n\r\n}","/**\r\n *   我们一起逃离\r\n     From proving to ourselves we're not afraid\r\n     为了证明自己并不懦弱\r\n     And now\r\n     而现在\r\n     These silver screens,these scripted dreams\r\n     这些闪亮的银幕，和潦草的梦想\r\n     And now\r\n     而现在\r\n     We're suddenly\r\n     如此突然地\r\n     Fates latest casualties\r\n     我们都败给了命运。\r\n                            -----《Reprieve》2020.04.14\r\n */\r\nexport default class Queue {\r\n    constructor(reche) {\r\n        this.reche = reche;\r\n        this.fileStoppedId = [];\r\n        this.queue = {\r\n            fileChunkOnWaiting: [],//等待上传的队列\r\n            fileChunkOnProgress: [],//正在上传的队列\r\n            fileChunkOnCompleted: [],//上传成功的队列\r\n            fileChunkOnError: [],//上传失败的队列\r\n            fileChunkStopped: [],//暂停中的文件\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 将文件(块)从各个队列中移除\r\n     * @param fileId\r\n     */\r\n    deleteChunkOfQueue(fileId) {\r\n        for (let item in this.queue) {\r\n            let tempObj = [];\r\n            for (let i = 0; i < this.queue[item].length; i++) {\r\n                if (this.queue[item][i].fileId !== fileId) {\r\n                    tempObj.push(Object.assign({},this.queue[item][i]))\r\n                }\r\n            }\r\n            this.queue[item] = tempObj\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 将某个状态的文件队列中的某个文件的块前移\r\n     * @param queueName\r\n     * @param fileId\r\n     */\r\n    preposition(queueName,fileId) {\r\n        let tempArr = [];\r\n        let otherThisArr = [];\r\n        for(let i= 0;i<this.queue[queueName].length;i++){\r\n            let aObj = Object.assign({},this.queue[queueName][i]);\r\n            if(this.queue[queueName][i].fileId === fileId){\r\n                tempArr.push(aObj)\r\n            }else{\r\n                otherThisArr.push(aObj)\r\n            }\r\n        }\r\n        this.queue[queueName] = tempArr.concat(otherThisArr);\r\n    }\r\n    /**\r\n     * 重置任务队列\r\n     */\r\n    resetChunkQueue() {\r\n        this.queue = {\r\n            fileChunkOnWaiting: [],\r\n            fileChunkOnProgress: [],\r\n            fileChunkOnCompleted: [],\r\n            fileChunkOnError: [],\r\n            fileChunkStopped: [],\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 队列中移除指定fileId任务，fileId不传即删除所有任务\r\n     * @param fileId\r\n     */\r\n    removeFileChunk(fileId = null) {\r\n        if (fileId) {\r\n            this.deleteChunkOfQueue(fileId)\r\n        } else {\r\n            this.resetChunkQueue()\r\n        }\r\n        //停止所有xhr任务\r\n        this.reche.abortAndRemoveXhr(fileId)\r\n    }\r\n\r\n    /**\r\n     * 添加文件到文件列表和文件上传队列\r\n     * @param fileSliced\r\n     * @returns {Queue}\r\n     */\r\n    appendFileChunkQueue(fileSliced) {\r\n        if (fileSliced.file && !fileSliced.fileChunk.length) {\r\n            this.queue.fileChunkOnWaiting.push({\r\n                fileId: fileSliced.fileId,\r\n                index: -1,//这是一整个文件\r\n                fileChunkSize: fileSliced.fileSize,\r\n                chunk: fileSliced.file,\r\n                data: fileSliced.data\r\n            })\r\n        } else {\r\n            this.queue.fileChunkOnWaiting = this.queue.fileChunkOnWaiting.concat(fileSliced.fileChunk)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 队列任务分发\r\n     * 将一个个文件（块）从等待队列转入上传队列\r\n     * @returns {boolean|*}\r\n     */\r\n    dispatch() {\r\n        //判断是否有暂停的任务\r\n        let index = 0;\r\n        let kIndex = -1;\r\n        if (this.fileStoppedId.length) {\r\n            for (let k = 0; k < this.queue.fileChunkOnWaiting.length; k++) {\r\n                let tag = true;\r\n                for (let i = 0; i < this.fileStoppedId.length; i++) {\r\n                    if (this.fileStoppedId[i] === this.queue.fileChunkOnWaiting[k].fileId) {\r\n                        tag = !tag;\r\n                        break\r\n                    }\r\n                }\r\n                if (tag) {\r\n                    index = k;\r\n                    break\r\n                }\r\n                kIndex = k\r\n            }\r\n        }\r\n        if (kIndex === this.queue.fileChunkOnWaiting.length - 1) {\r\n            return false\r\n        } else {\r\n            if (this.queue.fileChunkOnWaiting.length) {\r\n                let fChunk = this.queue.fileChunkOnWaiting.splice(index, 1)[0];\r\n                this.queue.fileChunkOnProgress.push(fChunk);\r\n                return fChunk\r\n            } else {\r\n                console.warn('no fileChunk in fileChunkOnWaiting')\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 将文件（块）从上传中移入已完成\r\n     * @param chunk\r\n     * @returns {*}\r\n     */\r\n    formProgressToCompleted(chunk) {\r\n        for (let i = 0; i < this.queue.fileChunkOnProgress.length; i++) {\r\n            if (chunk.fileId === this.queue.fileChunkOnProgress[i].fileId &&\r\n                chunk.index === this.queue.fileChunkOnProgress[i].index) {\r\n                const fChunk = this.queue.fileChunkOnProgress.splice(i, 1)[0];\r\n                this.queue.fileChunkOnCompleted.push(fChunk);\r\n                return fChunk\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    forProgressToError(fileId){\r\n\r\n    }\r\n\r\n    formWaitingToStopped(fileId) {\r\n\r\n    }\r\n\r\n    formStoppedToWaiting(fileId) {\r\n\r\n    }\r\n\r\n    /**\r\n     * 是否完成某个文件的任务\r\n     * @param fileId\r\n     * @returns {boolean}\r\n     */\r\n    isComplete(fileId) {\r\n        let tag = 0;\r\n        for (let i = 0; i < this.queue.fileChunkOnCompleted.length; i++) {\r\n            if (this.queue.fileChunkOnCompleted[i].fileId === fileId) {\r\n                tag += 1\r\n            }\r\n        }\r\n        return tag === this.reche.fileMap[fileId].fileChunk.length;\r\n    }\r\n\r\n    /**\r\n     * 是否完成了当前选择的所有文件的任务\r\n     * @returns {boolean}\r\n     */\r\n    isCompleteAll() {\r\n        let statusAllComplete = true;\r\n        for(let item in this.reche.fileMap){\r\n            if(this.reche.fileMap[item].status !== this.reche.fileStatus.onCompleted){\r\n                statusAllComplete = false;\r\n                break\r\n            }\r\n        }\r\n        return this.queue.fileChunkOnWaiting.length === 0 &&\r\n            this.queue.fileChunkStopped.length === 0 &&\r\n            this.queue.fileChunkOnProgress.length === 0 &&\r\n            this.queue.fileChunkOnError.length === 0 &&\r\n            this.reche.xhrList.length === 0 && statusAllComplete;\r\n    }\r\n}","import Util from './Util';\r\nimport Xhr from './Xhr';\r\nimport Event from './Event';\r\nimport I18n from './I18n';\r\nimport Option from './Option';\r\nimport Queue from './Queue';\r\nimport FileSlice from './FileSlice';\r\n\r\n/**\r\n *   啊\r\n\r\n 今天都是好日子\r\n\r\n 千金的光阴不能等\r\n\r\n 明天又是好日子\r\n\r\n 赶上了盛世咱享太平\r\n\r\n 今天是个好日子\r\n\r\n 心想的事儿都能成\r\n */\r\n\r\nclass Reche {\r\n    constructor(option) {\r\n        this.fileMap = {};\r\n        this.util = new Util(this);\r\n        this.option = new Option().optionInit(option);\r\n        this.event = new Event();\r\n        this.i18n = new I18n(this.option.lang);\r\n        this.queue = new Queue(this);\r\n        this.fileSlice = new FileSlice(this);\r\n        this.fileStatus = {\r\n            onWaiting: 0,//等待中\r\n            onProgress: 1,//上传中\r\n            onCompleted: 2,//已完成\r\n            onStopped: 3,//已暂停\r\n            onError: 4,//上传失败\r\n            onCanceled: 5//已取消\r\n        };\r\n        this.xhrList = []\r\n    }\r\n\r\n    /**\r\n     * 文件解析上传主入口\r\n     * @param option\r\n     * @returns {{}|*}\r\n     */\r\n    reche(option) {\r\n        let files = option.files;\r\n        let data = this.util.isObject(option.data) ? option.data : null;\r\n        if (files.length) {\r\n            for (let i = 0; i < files.length; i++) {\r\n                let fileSliced = this.fileSlice.fileSlice(files[i], data);\r\n                this.fileMap[fileSliced.fileId] = fileSliced;\r\n                this.queue.appendFileChunkQueue(fileSliced);\r\n                this.event.trigger('fileAppend', {\r\n                    event: 'event:::fileAppend',\r\n                    file: files,\r\n                    fileMap: this.fileMap\r\n                });\r\n                this.event.trigger('fileStatusChange', {\r\n                    event: 'event:::fileStatusChange',\r\n                    fileId: fileSliced.fileId,\r\n                    status: this.fileStatus.onWaiting,\r\n                });\r\n            }\r\n            this.exeXhr();\r\n        }\r\n    }\r\n\r\n    exeXhr() {\r\n        if (this.xhrList.length === 0 && this.queue.queue.fileChunkOnWaiting.length) {\r\n            let fc = this.queue.dispatch();\r\n            if(fc){\r\n                let xhr = new Xhr(this);\r\n                this.xhrList.push(xhr);\r\n                xhr.sendXhr(fc)\r\n            }\r\n        }\r\n    }\r\n\r\n    abortAndRemoveXhr(fileId = null) {\r\n        if(fileId){\r\n            for (let i = 0; i < this.xhrList.length; i++) {\r\n                if (fileId === this.xhrList[i].fileOrChunk.fileId) {\r\n                    this.xhrList[i].abortXhr();\r\n                    this.xhrList.splice(i, 1);\r\n                    return\r\n                }\r\n            }\r\n        }else {\r\n            for (let i = 0; i < this.xhrList.length; i++) {\r\n                this.xhrList[i].abortXhr();\r\n                this.xhrList = []\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * 删除所有上传任务\r\n     * todo 暂时不启用\r\n     * @returns {{fileMap: ({}|*)}}\r\n     */\r\n    // removeAll() {\r\n    //     this.fileMap = {};\r\n    //     this.queue.removeFileChunk();\r\n    //     this.abortAndRemoveXhr();\r\n    //     this.event.trigger('fileRemoveAll', {\r\n    //         event: 'event:::fileRemoveAll',\r\n    //         fileMap: this.fileMap\r\n    //     });\r\n    // }\r\n\r\n    /**\r\n     * 删除某个上传任务\r\n     * @param fileId\r\n     * @returns {{fileMap: ({}|*), fileId: *}}\r\n     */\r\n    remove(fileId) {\r\n        if (this.fileMap[fileId]) {\r\n            if(this.fileMap[fileId].status === this.fileStatus.onCanceled ||\r\n                this.fileMap[fileId].status === this.fileStatus.onCompleted ||\r\n                this.fileMap[fileId].status === this.fileStatus.onError){\r\n                delete this.fileMap[fileId];\r\n                this.queue.removeFileChunk(fileId);\r\n                this.abortAndRemoveXhr(fileId);\r\n                this.event.trigger('fileRemove', {\r\n                    event: 'event:::fileRemove',\r\n                    fileId: fileId,\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    stop(fileId){\r\n        if(this.fileMap[fileId]){\r\n            if(this.fileMap[fileId].file){\r\n                this.event.trigger('fileStop', {\r\n                    event: 'event:::fileStop',\r\n                    fileId: fileId,\r\n                    canStop:false,\r\n                    message:this.i18n.i18n('cannotStopByProgress')\r\n                });\r\n            }else {\r\n                if(this.fileMap[fileId].status === this.fileStatus.onWaiting || this.fileMap[fileId].status === this.fileStatus.onProgress){\r\n                    this.queue.fileStoppedId.push(fileId);\r\n                    this.fileMap[fileId].status = this.fileStatus.onStopped;\r\n                    this.event.trigger('fileStop', {\r\n                        event: 'event:::fileStop',\r\n                        fileId: fileId,\r\n                    });\r\n                    this.event.trigger('fileStatusChange', {\r\n                        event: 'event:::fileStatusChange',\r\n                        fileId: fileId,\r\n                        status: this.fileStatus.onStopped,\r\n                    });\r\n                }else{\r\n                    this.event.trigger('fileStop', {\r\n                        event: 'event:::fileStop',\r\n                        fileId: fileId,\r\n                        canStop:false,\r\n                        message:this.i18n.i18n('cannotStop')\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    changeFileStatus(fileId = null,excludeFileId = null,formStatus,toStatus){\r\n        if(fileId){\r\n            if(this.fileMap[fileId].status !== toStatus){\r\n                this.fileMap[fileId].status = toStatus;\r\n                this.event.trigger('fileStatusChange', {\r\n                    event: 'event:::fileStatusChange',\r\n                    fileId: fileId,\r\n                    status: toStatus,\r\n                });\r\n            }\r\n        }else {\r\n            for(let item in this.fileMap){\r\n                if (item !== excludeFileId && this.fileMap[item].status === formStatus){\r\n                    this.fileMap[item].status = toStatus;\r\n                    this.event.trigger('fileStatusChange', {\r\n                        event: 'event:::fileStatusChange',\r\n                        fileId: fileId,\r\n                        status: toStatus,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    removeFileIdFormStoppedId(fileId){\r\n        for(let i = 0;i<this.queue.fileStoppedId.length;i++){\r\n            if(fileId === this.queue.fileStoppedId[i]){\r\n                this.queue.fileStoppedId.splice(i,1);\r\n                break\r\n            }\r\n        }\r\n    }\r\n    resume(fileId){\r\n        if(this.fileMap[fileId] && this.fileMap[fileId].status === this.fileStatus.onStopped){\r\n            console.log(this.queue.queue.fileChunkOnProgress);\r\n            if(this.queue.queue.fileChunkOnProgress.length === 0){\r\n                this.changeFileStatus(null,fileId,this.fileStatus.onProgress,this.fileStatus.onWaiting);\r\n                this.removeFileIdFormStoppedId(fileId);\r\n                this.abortAndRemoveXhr(fileId);\r\n                this.queue.preposition('fileChunkOnWaiting',fileId);\r\n                this.event.trigger('fileResume', {\r\n                    event: 'event:::fileResume',\r\n                    fileId: fileId,\r\n                });\r\n                this.exeXhr()\r\n            }\r\n\r\n        }\r\n    }\r\n    restart(fileId){\r\n        if(this.fileMap[fileId] ){\r\n            if(this.fileMap[fileId].status === this.fileStatus.onCanceled ||\r\n                this.fileMap[fileId].status === this.fileStatus.onError){\r\n                /**\r\n                 * 1、改变文件状态为等待状态\r\n                 * 2、将文件块添加到等待队列\r\n                 */\r\n                this.changeFileStatus(fileId,null,null,this.fileStatus.onWaiting);\r\n                this.queue.appendFileChunkQueue(this.fileMap[fileId]);\r\n\r\n\r\n                this.event.trigger('fileRestart', {\r\n                    event: 'event:::fileRestart',\r\n                    fileId: fileId,\r\n                });\r\n\r\n                this.exeXhr();\r\n            }\r\n        }\r\n    }\r\n    cancel(fileId){\r\n        if(this.fileMap[fileId]){\r\n            if(this.fileMap[fileId].status === this.fileStatus.onWaiting ||\r\n                this.fileMap[fileId].status === this.fileStatus.onStopped ||\r\n                this.fileMap[fileId].status === this.fileStatus.onProgress){\r\n                this.removeFileIdFormStoppedId(fileId);\r\n                this.changeFileStatus(fileId,null,null,this.fileStatus.onCanceled);\r\n                this.abortAndRemoveXhr(fileId);\r\n                this.queue.removeFileChunk(fileId);\r\n                this.event.trigger('fileCancel', {\r\n                    event: 'event:::fileCancel',\r\n                    fileId: fileId,\r\n                });\r\n                this.fileMap[fileId].progress = 0;\r\n                this.event.trigger('fileProgress', {\r\n                    event: 'event:::fileProgress',\r\n                    fileId: fileId,\r\n                    progress: 0,\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    on(name, callback) {\r\n        this.event.on(name, callback);\r\n        return this\r\n    }\r\n\r\n}\r\n\r\nObject.defineProperty(Reche, 'version', {\r\n    enumerable: true,\r\n    get: function () {\r\n        // replaced by browserify-versionify transform\r\n        return '__VERSION__';\r\n    }\r\n});\r\nexport default Reche\r\n\r\n","export default class Util {\r\n    constructor(reche) {\r\n        this.reche = reche;\r\n        this.fileStatus = {\r\n            onWaiting: 0,//等待中\r\n            onProgress: 1,//上传中\r\n            onStopped: 2,//已暂停\r\n            onCompleted: 3,//已完成\r\n            onError: 4,//上传失败\r\n            onCanceled: 5//已取消\r\n        }\r\n    }\r\n\r\n    isNull(val) {\r\n        return val === null;\r\n    }\r\n\r\n    isNullString(val) {\r\n        return val === \"\";\r\n    }\r\n\r\n    isObject(val) {\r\n        if (val !== null && typeof val === \"object\") {\r\n            return val.constructor === Object;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isUndefined(val) {\r\n        return val === undefined;\r\n    }\r\n\r\n    isNumber(val) {\r\n        return typeof val === 'number';\r\n    }\r\n\r\n    isString(val) {\r\n        return typeof val === 'string';\r\n    }\r\n\r\n    isBoolean(val) {\r\n        return val === true || val === false;\r\n    }\r\n\r\n    isTrue(val) {\r\n        return val === true;\r\n    }\r\n\r\n    randomString(len) {\r\n        let str = \"\";\r\n        let range = len;\r\n        let arr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\r\n            'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',\r\n            'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\r\n            'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F',\r\n            'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',\r\n            'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\r\n        for (let i = 0; i < range; i++) {\r\n            let pos = Math.round(Math.random() * (arr.length - 1));\r\n            str += arr[pos];\r\n        }\r\n        if (this.reche.fileMap[str]) {\r\n            this.randomString(len)\r\n        } else {\r\n            return str;\r\n        }\r\n    }\r\n\r\n    isFalse(val) {\r\n        return val === false;\r\n    }\r\n\r\n    isArray(val) {\r\n        return val instanceof Array\r\n    }\r\n}","export default class Xhr {\r\n    constructor(reche) {\r\n        this.reche = reche;\r\n        this.xhr = this.initXhr();\r\n        this.progress = 0;\r\n        this.fileOrChunk = null\r\n    }\r\n\r\n    /**\r\n     * 初始化一个XHR，但是不发送 ，不执行send方法\r\n     * @returns {XMLHttpRequest|null}\r\n     */\r\n    initXhr() {\r\n        let xhr = null;\r\n        if (window.XMLHttpRequest) {\r\n            xhr = new XMLHttpRequest()\r\n        } else if (window.ActiveXObject) {\r\n            xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\r\n        } else {\r\n            console.warn(this.reche.i18n.i18n('unSupportXhr'));\r\n            return xhr\r\n        }\r\n        if (this.reche.option.async) {\r\n            xhr.timeout = this.reche.option.timeout;\r\n            xhr.upload.ontimeout = (e) => {\r\n                console.log('ontimeout::', e);\r\n            };\r\n        }\r\n        xhr.upload.onprogress = (e) => {\r\n            let progress = 0;\r\n            if (e.lengthComputable) {\r\n                this.progress = e.loaded / e.total;\r\n                if (this.fileOrChunk.index === -1) {\r\n                    progress = e.loaded / e.total\r\n                } else {\r\n                    let totalUpSize = 0;\r\n                    //获取整个文件上传进度\r\n                    for (let i = 0; i < this.reche.xhrList.length; i++) {\r\n                        totalUpSize += (this.reche.xhrList[i].fileOrChunk.fileChunkSize * this.progress)\r\n                    }\r\n                    for (let n = 0; n < this.reche.queue.queue.fileChunkOnCompleted.length; n++) {\r\n                        if (this.fileOrChunk.fileId === this.reche.queue.queue.fileChunkOnCompleted[n].fileId) {\r\n                            totalUpSize += this.reche.queue.queue.fileChunkOnCompleted[n].fileChunkSize\r\n                        }\r\n                    }\r\n                    progress = totalUpSize / this.reche.fileMap[this.fileOrChunk.fileId].fileSize\r\n                }\r\n            }\r\n            this.reche.fileMap[this.fileOrChunk.fileId].progress = progress;\r\n            this.reche.event.trigger('fileProgress', {\r\n                event: 'event:::fileProgress',\r\n                fileId: this.fileOrChunk.fileId,\r\n                progress: progress,\r\n            });\r\n        };\r\n        xhr.upload.onerror = (e) => {\r\n            console.log('onerror::', e);\r\n        };\r\n        xhr.upload.onabort = (e) => {\r\n            console.log('onabort::', e);\r\n        };\r\n        xhr.onreadystatechange = () => {\r\n            if (xhr.readyState === 4) {\r\n                if (xhr.status === 200) {\r\n                    let resJson = JSON.parse(xhr.response);\r\n                    if (Number(resJson.status) === 200) {\r\n                        // 这里已经传完了\r\n                        // 1、文件上传队列位置改变\r\n                        let fileOfMap = this.reche.fileMap[this.fileOrChunk.fileId];\r\n                        console.log(\"当前文件总块数：\" + fileOfMap.fileChunk.length + \"----已完成完成块数：\" + this.fileOrChunk.index);\r\n                        this.reche.queue.formProgressToCompleted(this.fileOrChunk);\r\n                        if (this.fileOrChunk.index === -1) {\r\n                            // 如果是小文件上传\r\n                            this.reche.changeFileStatus(this.fileOrChunk.fileId,null,null,this.reche.fileStatus.onCompleted);\r\n                        } else {\r\n                            // 如果是当前大文件块的第一块 绑定设置回传参数\r\n                            if (this.fileOrChunk.index === 1) {\r\n                                let resParam = {};\r\n                                let cusfrpk = this.reche.option.chunkFirstResParamKey;\r\n                                if (resJson.data) {\r\n                                    for (let item in cusfrpk) {\r\n                                        resParam[cusfrpk[item]] = resJson.data[cusfrpk[item]]\r\n                                    }\r\n                                    this.reche.fileMap[this.fileOrChunk.fileId].resParam = resParam\r\n                                }\r\n                            }\r\n                            //判断整个文件是否上传完\r\n                            if (this.reche.queue.isComplete(this.fileOrChunk.fileId)) {\r\n                                // 文件状态改变\r\n                                this.reche.changeFileStatus(this.fileOrChunk.fileId,null,null,this.reche.fileStatus.onCompleted);\r\n                            }\r\n                        }\r\n                        //本次任务完成 停止并移除Xhr\r\n                        this.reche.abortAndRemoveXhr(this.fileOrChunk.fileId);\r\n                        // 判断是否所有任务完成\r\n                        if (this.reche.queue.isCompleteAll()) {\r\n                            this.reche.event.trigger('fileCompleteAll', {\r\n                                event: 'event:::fileCompleteAll',\r\n                                response: xhr.response\r\n                            });\r\n                        } else {\r\n                            //执行下次任务\r\n                            this.reche.exeXhr()\r\n                        }\r\n                    } else {\r\n                        // todo 请求成功但是上传失败\r\n                    }\r\n                } else {\r\n                    // todo 请求失败\r\n\r\n                }\r\n            }\r\n        };\r\n        return xhr\r\n    }\r\n\r\n    /**\r\n     * 发送请求\r\n     * @param fileOrChunk\r\n     */\r\n    sendXhr(fileOrChunk) {\r\n        this.fileOrChunk = fileOrChunk;\r\n        if (this.xhr) {\r\n            let fd = this.buildFormData(fileOrChunk);\r\n            if (this.reche.fileMap[fileOrChunk.fileId].status !== this.reche.fileStatus.onProgress) {\r\n                this.reche.changeFileStatus(this.fileOrChunk.fileId,null,null,this.reche.fileStatus.onProgress)\r\n            }\r\n            let path = this.fileOrChunk.index === -1 ? this.reche.option.path : this.reche.option.chunkPath;\r\n            this.xhr.open('POST', path, this.reche.option.async);\r\n            this.setXhrHeader(this.xhr,this.reche.option.headers);\r\n            this.xhr.send(fd)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 构建formdata数据\r\n     * @param fileOrChunk\r\n     * @returns {FormData}\r\n     */\r\n    buildFormData(fileOrChunk) {\r\n        let formData = new FormData();\r\n        formData.append(this.reche.option.fdKey.fileKey, fileOrChunk.chunk);\r\n        formData.append(this.reche.option.fdKey.chunkKey, fileOrChunk.index);\r\n        formData.append(this.reche.option.fdKey.chunksKey, this.reche.fileMap[fileOrChunk.fileId].fileChunk.length.toString());\r\n        let resParam = this.reche.fileMap[fileOrChunk.fileId].resParam;\r\n        if (!resParam) {\r\n            formData.append(this.reche.option.fdKey.fileNameKey, this.reche.fileMap[fileOrChunk.fileId].fileName);\r\n        }\r\n        if (resParam) {\r\n            for (let item in resParam) {\r\n                formData.append(item, resParam[item])\r\n            }\r\n        }\r\n        if (this.reche.util.isObject(fileOrChunk.data) && fileOrChunk.data.toString() !== '{}') {\r\n            for (let item in fileOrChunk.data) {\r\n                formData.append(item, fileOrChunk.data[item])\r\n            }\r\n        }\r\n        return formData\r\n    }\r\n\r\n    /**\r\n     * 终止请求\r\n     * todo 在这里终止请求好像并没有什么卵用，需要继续测试\r\n     */\r\n    abortXhr() {\r\n        if (this.xhr) {\r\n            //this.xhr.abort();\r\n            this.xhr = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置请求头\r\n     * @param xhr\r\n     * @param headers\r\n     */\r\n    setXhrHeader(xhr, headers) {\r\n        if(this.reche.util.isObject(headers) && headers.toString() !== '{}'){\r\n            for(let item in headers){\r\n                xhr.setRequestHeader(item,headers[item]);\r\n            }\r\n        }\r\n    }\r\n}","module.exports = require('./core/Reche').default;\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}